---
import CTA1 from '../cta/CTA1.astro';
import SectionsDescriptor from '../../components/SectionsDescriptor.astro';
import Image from 'astro/components/Image.astro';
import AnimateOnScroll from '../../animations/AnimateOnScroll.astro';

const { imgsData, headline, title, description, featuresList, textPosition } = Astro.props;

// Determine animation based on text position
const animation = textPosition === 'right' ? 'slide-from-right' : 'slide-from-left';
---

<section class={`section main text-${textPosition}`}>
  <div class='images-container'>
    {
      imgsData.map((img, index) => (
        <div class='image-wrapper'>
          <Image src={img.src} alt={img.alt} class='section-image' id={index} />
        </div>
      ))
    }
  </div>
  <div class='content'>
    <div class='content-top'>
      <SectionsDescriptor headline={headline} />
      <AnimateOnScroll animation={animation} duration={1} delay={0}>
        <h2 class='section-title'>{title}</h2>
      </AnimateOnScroll>
    </div>
    <AnimateOnScroll animation='up-slide' duration={1} delay={0}>
      <p class='section-description'>{description}</p>
      <div class='features-list'>
        {
          featuresList.map((feature) => (
            <div class='feature-item'>
              <div class='circle-wrapper'>
                <img src={feature.icon} alt='' class='feature-icon' />
              </div>
              <div class='feature-text'>
                <h3 class='feature-title'>{feature.title}</h3>
                <p class='feature-description'>{feature.description}</p>
              </div>
            </div>
          ))
        }
      </div>
      <CTA1 />
    </AnimateOnScroll>
  </div>
</section>

<style>
  .section.main {
    display: grid;
    grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
    gap: var(--section-spacing-lg, 48px);
    align-items: start;
  }

  /* Text on the right (default) - images on left */
  .section.main.text-right {
    grid-template-areas: 'images content';
  }

  .section.main.text-right .images-container {
    grid-area: images;
  }

  .section.main.text-right .content {
    grid-area: content;
  }

  /* Text on the left - images on right */
  .section.main.text-left {
    grid-template-areas: 'content images';
  }

  .section.main.text-left .images-container {
    grid-area: images;
  }

  .section.main.text-left .content {
    grid-area: content;
  }

  .images-container {
    display: flex;
    flex-direction: column;
    gap: var(--section-spacing-md);
    width: 100%;
    min-width: 0;
  }

  .image-wrapper {
    overflow: hidden;
    border-radius: var(--rounded-3xl);
  }

  .section-image {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;
  }

  .section-image:hover {
    transform: scale(1.05);
  }

  .content {
    width: 100%;
    min-width: 0;
    display: flex;
    flex-direction: column;
    gap: var(--section-spacing-sm);
  }

  .section-title {
    font-size: var(--fs-600);
    font-weight: 700;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  .section-description {
    font-size: var(--fs-200);
    line-height: 1.3;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  .features-list {
    display: flex;
    flex-direction: column;
    gap: var(--section-spacing-sm, 24px);
    margin: var(--space-600) 0;
  }

  .feature-item {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: var(--section-spacing-sn, 24px);
    min-width: 0;
  }

  .circle-wrapper {
    width: 56px;
    height: 56px;
    min-width: 56px;
    background-color: var(--primary);
    border-radius: var(--rounded-full);
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .feature-icon {
    width: 30px;
    height: 30px;
  }

  .feature-text {
    display: flex;
    flex-direction: column;
    gap: 8px;
    min-width: 0;
    flex: 1;
  }

  .feature-title {
    font-size: var(--fs-400);
    font-weight: 600;
    margin: 0;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  .feature-description {
    font-size: var(--fs-200);
    margin: 0;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  /* Responsive: stack on mobile */
  @media (max-width: 768px) {
    .section.main {
      grid-template-columns: 1fr;
      gap: var(--section-spacing-md, 32px);
    }

    /* Always show images first on mobile */
    .section.main.text-left,
    .section.main.text-right {
      grid-template-areas:
        'images'
        'content';
    }
  }

  /* Optional: adjust for tablet */
  @media (max-width: 1024px) and (min-width: 769px) {
    .section.main {
      gap: var(--section-spacing-md, 32px);
    }
  }
</style>
