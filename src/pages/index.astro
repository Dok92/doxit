---
import Hero from '../components/main/Hero.astro';
import Footer from '../components/main/Footer.astro';
import Layout from '../layouts/Layout.astro';
import AnimateOnScroll from '../animations/AnimateOnScroll.astro';
import Faq1 from '../components/accordions/Faq1.astro';
import NavMenu from '../components/navbars/Navbar2.astro';
import i18next, { t, changeLanguage } from 'i18next';
import { Image } from 'astro:assets';
import LangSwithcer1 from '../components/langSwithcers/langSwithcer1.astro';
import roadVan from '../assets/road-van.webp';
import rentVan from '../assets/van-rent-2.webp';
import cargoVan from '../assets/van-cargo-loaded.webp';
import vansGarage from '../assets/two-vans-garage.webp';
import SectionsDescriptor from '../components/SectionsDescriptor.astro';
import SectionMain from '../components/sections/SectionMain.astro';

const imgsData = [
  {
    src: vansGarage,
    alt: t('index.sectionMain.imgsData.imgOne.alt'),
  },
];

const featuresList = [
  {
    icon: '/img/icons/van-solid.svg',
    title: t('index.sectionMain.featuresList.featureOne.title'),
    description: t('index.sectionMain.featuresList.featureOne.description'),
  },
  {
    icon: '/img/icons/solar_hand-money-bold.svg',
    title: t('index.sectionMain.featuresList.featureTwo.title'),
    description: t('index.sectionMain.featuresList.featureTwo.description'),
  },
  {
    icon: '/img/icons/tdesign_secured-filled.svg',
    title: t('index.sectionMain.featuresList.featureThree.title'),
    description: t('index.sectionMain.featuresList.featureThree.description'),
  },
  {
    icon: '/img/icons/solar_like-bold.svg',
    title: t('index.sectionMain.featuresList.featureFour.title'),
    description: t('index.sectionMain.featuresList.featureFour.description'),
  },
];

changeLanguage('de');
---

<Layout>
  <LangSwithcer1 />
  <NavMenu />
  <Hero
    heroImg={roadVan}
    alt='index.hero.heroImgAlt'
    heading={t('index.hero.heading')}
    subheading={t('index.hero.subheading')}
  />
  <!-- TODO Finish responsive design font mode etc. for tablet view (especially cards) -->
  <section class='services'>
    <div class='section-heading'>
      <SectionsDescriptor headline='our services' />
      <AnimateOnScroll animation='up-slide' duration={1} delay={0}>
        <h2 class='section-title'>{t('index.services.title')}</h2>
      </AnimateOnScroll>
    </div>
    <div class='services-cards'>
      <div class='card' id='card-1'>
        <div class='service-thumbnail'>
          <Image src={rentVan} alt={t('index.services.serviceOne.alt')} class='card-img' />
          <div class='button-link'>
            <a href='./rents.astro' class='service-button'
              ><img src='/img/icons/diagonal-arrow.svg' alt='' class='arrow' /></a
            >
          </div>
          <div class='decor-border'></div>
          <div class='card-text'>
            <h3 class='card-heading'>{t('index.services.serviceOne.heading')}</h3>
            <p class='card-paragraph'>{t('index.services.serviceOne.paragraph')}</p>
          </div>
        </div>
      </div>
      <div class='card' id='card-2'>
        <div class='service-thumbnail'>
          <Image src={cargoVan} alt={t('index.services.serviceTwo.alt')} class='card-img' />
          <div class='button-link'>
            <a href='./cargo.astro' class='service-button'
              ><img src='/img/icons/diagonal-arrow.svg' alt='' class='arrow' /></a
            >
          </div>
          <div class='decor-border'></div>
          <div class='card-text'>
            <h3 class='card-heading'>{t('index.services.serviceTwo.heading')}</h3>
            <p class='card-paragraph'>{t('index.services.serviceTwo.paragraph')}</p>
          </div>
        </div>
      </div>
    </div>
  </section>
  <SectionMain
    textPosition='right'
    imgsData={imgsData}
    headline={t('index.sectionMain.headline')}
    title={t('index.sectionMain.title')}
    description={t('index.sectionMain.description')}
    featuresList={featuresList}
  />
  <style>
    .services-cards {
      display: flex;
      flex-direction: row;
      gap: var(--card-spacing);
    }

    .card {
      background: var(--primary);
      border-radius: var(--rounded-3xl);
      padding: var(--space-200);
      width: 350px;
      position: relative;
    }

    .card-img {
      border-radius: var(--rounded-2xl);
      width: 100%;
      height: auto;
      margin-bottom: var(--space-200);
    }

    .button-link {
      position: absolute;
      top: 185px;
      right: 55px;
      z-index: 500;
    }

    .arrow {
      width: 14px;
      height: 14px;
      position: absolute;
      top: 18px;
      left: 18px;
      z-index: 333;
      transition: background 0.3s ease;
    }

    .card-text {
      padding: 0 var(--space-400);
    }
    .card-heading {
      font-size: var(--fs-500);
      font-weight: 600;
      padding-bottom: var(--space-400);
      color: black;
      border-bottom: 1px solid var(--primary-900);
    }

    .card-paragraph {
      font-size: var(--fs-200);
      color: black;
    }

    .service-button {
      background: white;
      width: 50px;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      z-index: 3333;
      transition: background 0.3s ease;
    }

    .decor-border {
      position: absolute;
      width: 100px;
      height: 34px;
      top: 177px;
      right: 30px;
      z-index: 1;
    }

    .decor-border:after {
      content: '';
      width: 100px;
      height: 33px;
      clip-path: path(
        'M0 33H100C90.7952 33 83.6787 25.1703 79.2588 17.1769C73.5989 6.94119 62.6183 0 50 0C37.3818 0 26.4011 6.94119 20.7412 17.1769C16.3213 25.1703 9.20474 33 0 33Z'
      );
      background-color: var(--primary);
      position: absolute;
      left: 0;
      bottom: -1px;
      display: block;
      z-index: -1;
    }

    @media (max-width: 768px) {
      .services {
        display: flex;
        align-items: center;
      }
      .services-cards {
        gap: var(--section-spacing-md);
        flex-direction: column;
      }
    }
    @media (max-width: 320px) {
      .card {
        width: 280px !important;
      }
      .button-link {
        top: 143px;
        right: 45px;
      }

      .decor-border {
        position: absolute;
        width: 100px;
        height: 34px;
        top: 137px;
        right: 20px;
        z-index: 1;
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const cards = document.querySelectorAll('.card');

      cards.forEach((card) => {
        const btn = card.querySelector('.service-button');
        const arrow = card.querySelector('.arrow');

        if (!btn || !arrow) return;

        let enterAnims = [];
        let leaveAnims = [];

        const cancelAll = (anims) => anims.forEach((a) => a && a.cancel());

        card.addEventListener('mouseenter', () => {
          cancelAll(leaveAnims);
          leaveAnims = [];

          // cancel any current animations to avoid jank
          cancelAll(enterAnims);
          enterAnims = [];

          const btnStart = getComputedStyle(btn).backgroundColor || '#ffffff';
          const arrowStart = getComputedStyle(arrow).filter || 'none';

          const btnAnim = btn.animate([{ background: btnStart }, { background: '#000' }], {
            duration: 300,
            easing: 'ease',
            fill: 'forwards',
          });

          const arrowAnim = arrow.animate([{ filter: arrowStart }, { filter: 'invert(1) brightness(1)' }], {
            duration: 300,
            easing: 'ease',
            fill: 'forwards',
          });

          enterAnims.push(btnAnim, arrowAnim);

          btnAnim.onfinish = () => {
            (btn as HTMLElement).style.background = '#000';
          };
          arrowAnim.onfinish = () => {
            (arrow as HTMLElement).style.filter = 'invert(1) brightness(1)';
          };
        });

        card.addEventListener('mouseleave', () => {
          cancelAll(enterAnims);
          enterAnims = [];

          // animate back to original
          const btnStart = getComputedStyle(btn).backgroundColor || '#000000';
          const arrowStart = getComputedStyle(arrow).filter || 'invert(1) brightness(1)';

          const btnAnim = btn.animate([{ background: btnStart }, { background: '#fff' }], {
            duration: 300,
            easing: 'ease',
            fill: 'forwards',
          });

          const arrowAnim = arrow.animate([{ filter: arrowStart }, { filter: 'none' }], {
            duration: 300,
            easing: 'ease',
            fill: 'forwards',
          });

          leaveAnims.push(btnAnim, arrowAnim);

          btnAnim.onfinish = () => {
            (btn as HTMLElement).style.background = '#fff';
          };
          arrowAnim.onfinish = () => {
            (arrow as HTMLElement).style.filter = 'none';
          };
        });
      });
    });
  </script>
</Layout>
